@model Pagin

@{

    int currentPage = Model.CurrentPage;
    int countPages = Model.TotalPages;
    Func<int?, string> generateUrl;
    var urlAction = Model.UrlAction;
    if (Model.IsPage)
    {
        generateUrl = (int? _pagenumber) =>
        {
            return Url.Page(urlAction, new { pagenumber = _pagenumber });
        };
    }
    else
    {
        generateUrl = (int? _pagenumber) =>
        {
            return Url.Action(urlAction, new { pagenumber = _pagenumber });
        };
    }

    if (currentPage > countPages)
        currentPage = countPages;

    if (countPages <= 1) return;


    int? preview = null;
    int? next = null;

    if (currentPage > 1)
        preview = currentPage - 1;

    if (currentPage < countPages)
        next = currentPage + 1;

    // Các trang hiện thị trong điều hướng
    List<int> pagesRanges = new List<int>();


    int delta = 2;             // Số trang mở rộng về mỗi bên trang hiện tại
    int remain = delta * 2;     // Số trang hai bên trang hiện tại

    pagesRanges.Add(currentPage);
    // Các trang phát triển về hai bên trang hiện tại
    for (int i = 1; i <= delta; i++)
    {
        if (currentPage + i <= countPages)
        {
            pagesRanges.Add(currentPage + i);
            remain--;
        }

        if (currentPage - i >= 1)
        {
            pagesRanges.Insert(0, currentPage - i);
            remain--;
        }

    }
    // Xử lý thêm vào các trang cho đủ remain
    //(xảy ra ở đầu mút của khoảng trang không đủ trang chèn  vào)
    if (remain > 0)
    {
        if (pagesRanges[0] == 1)
        {
            for (int i = 1; i <= remain; i++)
            {
                if (pagesRanges.Last() + 1 <= countPages)
                {
                    pagesRanges.Add(pagesRanges.Last() + 1);
                }
            }
        }
        else
        {
            for (int i = 1; i <= remain; i++)
            {
                if (pagesRanges.First() - 1 > 1)
                {
                    pagesRanges.Insert(0, pagesRanges.First() - 1);
                }
            }
        }
    }

}

<ul id="pagination" class="pagination">
    <!-- Previous page link -->
    @if (preview != null)
    {
        <li onclick="getPaging(this.value)" value="@preview" class="page-item">
            <a class="page-link" @*href="@generateUrl(preview)"*@><span aria-hidden="true">&laquo;</span></a>
        </li>
    }
    else
    {
        <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1" aria-disabled="true"><span aria-hidden="true">&laquo;</span></a>
        </li>
    }

    <!-- Numbered page links -->
    @foreach (var pageitem in pagesRanges)
    {
        if (pageitem != currentPage)
        {
            <li onclick="getPaging(this.value)" value="@pageitem" class="page-item">
                <a  class="page-link" @*href="@generateUrl(pageitem)"*@>
                    @pageitem
                </a>
            </li>
        }
        else
        {
            <li onclick="getPaging(this.value)" value="@pageitem" class="page-item active" aria-current="page">
                <a class="page-link" href="#">@pageitem @*<span class="sr-only">(current)</span>*@</a>
            </li>
        }
    }


    <!-- Next page link -->
    @if (next != null)
    {
        <li onclick="getPaging(this.value)"  value="@next" class="page-item">
            <a class="page-link" @* href="@generateUrl(next)"*@> <span aria-hidden="true">&raquo;</span></a>
        </li>
    }
    else
    {
        <li class="page-item disabled">
            <a class="page-link" href="#" tabindex="-1" aria-disabled="true"> <span aria-hidden="true">&raquo;</span></a>
        </li>
    }
</ul>


@*@{
    var totalPages = Model.TotalPages;
    var currentPage = Model.CurrentPage;

    var urlAction = Model.UrlAction;
    bool HasPrevious = Model.CurrentPage > 1;
    bool HasNext = Model.CurrentPage < Model.TotalPages;

    Func<int?, string> generateUrl;

    if (Model.IsPage)
    {
        generateUrl = (int? _pagenumber) =>
        {
            return Url.Page(urlAction, new { pageNumber = _pagenumber });
        };
    }
    else
    {
        generateUrl = (int? _pagenumber) =>
        {
            return Url.Action(urlAction, new { pageNumber = _pagenumber });
        };
    //}


}*@



@*<nav class="Page navigation example">


    <ul class="pagination">
        <!-- Previous page link -->
        @if (HasPrevious)
        {

                    <li class="page-item">
                            <a class="page-link" href="@generateUrl(currentPage - 1)" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>

                    </li>
        }
        else
        {
                    <li class="page-item disabled">
                            <a class="page-link" href="#" tabindex="-1" aria-disabled="true" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
        }

        <!-- Numbered page links -->
        @for (int i = 1; i <= totalPages; i++)
        {
            if (i != currentPage)
            {
                            <li class="page-item">
                                <a class="page-link" href="@generateUrl(i)">
                        @i
                                </a>
                            </li>
            }
            else
            {
                        <li class="page-item active" aria-current="page">
                            <a class="page-link" href="#">@i <span class="sr-only">(current)</span></a>
                        </li>
            }
        }


        <!-- Next page link -->
        @if (HasNext)
        {

                    <li class="page-item">
                            <a class="page-link" href="@generateUrl(currentPage +1 )" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
        }
        else
        {
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1" aria-disabled="true" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
        }
    </ul>
</nav>*@