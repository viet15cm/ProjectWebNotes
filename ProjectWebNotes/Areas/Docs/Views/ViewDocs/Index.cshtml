
@model Category
@{
    var categorys = ViewData["categorys"] as IEnumerable<Category>;
   
}

<div class="main-content">

    <div class="main-content-introduce">

        <p style="text-align: right"><i class="bi bi-alarm"></i> @DateTime.Now.ToString()</p>

    </div>
    
    <h2 class="main-content-title">
        @Model.Title
    </h2>
    <div class="db-description-category">      
           
        @if (Model.IConFont != null)
        {
            <img src="~/ImageManager/IconCategory/@Model.IConFont" />
        }else
        {
            <img src="~/img/aspnetcore.png" />
        }
        <p>@Model.Description</p>

    </div>
    <div class="db-categorry-content">

        @if (Model?.Content != null)
        {
            @Html.Raw(Model.Content)
        }
    </div>
    
    @if (Model.CategoryChildren?.Count > 0)
    {
        <div class="db-category-introduce-box">
            @foreach (var category in Model.CategoryChildren)
            {
                <div class="category-introduce-box">
                    @if (category.IConFont != null)
                    {
                        <img src="~/ImageManager/IconCategory/@category.IConFont" />
                    }else
                    {
                        <img src="~/img/aspnetcore.png" />
                    }
                    
                    <p>
                        <h5>
                            <a asp-controller="ViewDocs" asp-action="Index" asp-route-category="@category.Slug">@category.Title</a>
                        </h5>
                        @category.Description
                    </p>
                </div>
            }
        </div>
    }
  
</div>


@section Sidebar {
    @await Component.InvokeAsync(CategorySidebar.COMPONENTNAME,
             new CategorySidebar.CategorySidebarData()
             {
                 slugCategory = ViewBag.slugCategory,
                 listSerialUrl = ViewBag.listSerialUrl,
                 slugPost = ViewBag.slugPost,
                 currentCategory = ViewBag.currentCategory,
                 listPostInCategory = ViewBag.listPostInCategory,

             })

}

@section SidebarSmall{
    @await Component.InvokeAsync(CategorySidebar.COMPONENTNAME,
             new CategorySidebar.CategorySidebarData()
             {
                 slugCategory = ViewBag.slugCategory,
                 listSerialUrl = ViewBag.listSerialUrl,
                 slugPost = ViewBag.slugPost,
                 currentCategory = ViewBag.currentCategory,
                 listPostInCategory = ViewBag.listPostInCategory,

             })
}

@section BoxListCategory {
    @await Component.InvokeAsync(BoxListCategory.COMPONENTNAME, categorys)
}